(C) 2015-2016 Joshua Rogers <honey@internot.info> <https://github.com/MegaManSec/RS-Account-Checker>
Contact: @MegaManSec on Twitter.
See COPYING for information regarding distribution.


This program is a simple "account checker" for RuneScape, which takes proxies in the format of ipaddress:port, and accounts in the form on account:password.

It is multithreaded, and uses pthreads to handle mutexes.
Currently, it is Linux/GNU specific, and only supports bash(or another emulator that supports color codes)
It currently only supports GnuTLS, and NOT OpenSSL.


Output is by default to stderr, and is colored depending on the context.
Using the "-s" flag makes it so accounts are outputted in plaintext, without logging information. This is done to stdout.
If the "-i" flag is used, only valid(plus locked) accounts are outputted to std[out/err].

Accounts can also be outputted into files, with a 'basename' provided by the '-o' flag.
The files basename_invalid.txt, basename_locked.txt, basename_members_valid.txt, and basename_valid.txt are create and used(if the files already exist, texts are simply appended.)
Accounts that do not have valid logins are placed into basename_invalid.txt. basename_locked.txt is used for accounts that have a valid login but are locked. basename_valid.txt contains both F2P logins that work AND members logins that work, while basename_members_valid.txt contains ONLY those are that and that are members.

basename_unchecked.txt is also used if we run out of proxies before we finished all the accounts. In this case, the file will be overwritten(if already created.) -- This ONLY happens if we have TRIED ATLEAST one account. If we exit out before we get to the account checking phase, basename_unchecked.txt is left empty. BE CAREFUL not to overwrite any other file with the contents of, basename_unchecked.txt, before verifying it is not empty.
After writing to basename_unchecked.txt, we will attempt to move that file to our original account file, overwriting it. This is so we can re-run the script with new proxies, without having to copy/move the unchecked file to the account file. If we fail in this move, basename_unchecked.txt will still contain the unchecked accounts, and we will report an error.

It is reccomended to ALWAYS use an output file(-o), since if there are any unchecked accounts, they will not be shown anywhere, and the file will not be replaced with unchecked accounts.


Proxies are tried at a minimum of 4 times, which can optionally be set using the '-r' flag. Each time a proxy fails, the 'retries' is boosted by one, indicating it has been tried num times. When retries is the same amount as specified in -r, it will declare the proxy as dead.
If a proxy succeeds and already has a failure rate of more than 0, it will go down by one. When the proxy succeeds, it will set a variable that indicates whether the connection worked on a SOCKS5 connection, or a SOCKS4 connection; future use of the proxy will use the variable to set the connection -- This is one of the reasons why we must try proxies at least 4 times.

The inital connections, before a success, will flip between SOCKS4 and SOCKS5. This is calculated by reading how many tries we have already done on the proxy: "tries modulo 2."
On the first try, 'tries' will be 0: "0 modulo 2" equals 0. In C, 0 is equivelant to 'false'. Thus, the first attempt is done using SOCKS4: (currentpx->retries % 2) ? CURLPROXY_SOCKS5 : CURLPROXY_SOCKS4. This is kept up until a definitive type can be found.
Despite the naming, retries is not how many times it has been retried, but how many times it has been failed. A better way of thinking of it is a "failurecount".

After 4(or -r ) attempts, the proxy is declared dead and not used anymore.
If a captcha is hit, the proxy is also declared as dead.


The program does not support HTTP/s proxies.

Sanity checks are done on input files, such as logins being too long, or passwords being too short.

If you encounter any problems, please report them.


There are certains things that I will not fix, such as:
* Int overflow in the handling of the -r flag: "O.retries = strtol(optarg, NULL, 10);" -- This is because it will only affect the user, and if they put a negative number, or a too high number, it is their own fault.
* snprintf and malloc is not confirmed to return valid memory. This can be exhibited by the warnings that size_t(an unsigned value) is used instead of something that can handle a -1 return value from snprintf. -- If there are memory errors, the program will have more problems to worry about than snprintf messing up.





TODO: Pot files for accounts?
TODO: Get max thread count dynamically and put a restriction on it?




Sadly CURLOPT_PINNEDPUBLICKEY was only recently introduced to libcurl, so although the code is in this program, it's commented out.

If you want to use it without the Bugabuse email, just remove(or comment out) everything in the main() function above "//Initialize options"(L1010-1048 at the time of writing this)



Requirements:

libcurl >= 7.44.0
GNUTLS
OpenSSL
pthreads
gcrypt


